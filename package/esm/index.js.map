{"version":3,"sources":["../src/index.ts"],"names":["SignJWT","importPKCS8","payload","issuerId","duration","audience","expiresIn","issuer","tokenSync","privateKey","privateKeyId","result","token","then","catch","error","Error","message","key","toString","setProtectedHeader","alg","kid","sign","jwtGenCore"],"mappings":"AAAA,SAAqBA,OAAO,EAAEC,WAAW,QAAQ,OAAO;AAExD,MAAMC,UAAU,CACdC,UACAC,WACgB,CAAA;QAChBC,UAAU;QACVC,WAAWF;QACXG,QAAQJ;IACV,CAAA;AAEA;;;;;;;;;CASC,GACD,OAAO,SAASK,UACdC,UAA2B,EAC3BN,QAAgB,EAChBO,YAAoB,EACpBN,WAAW,GAAG;IAEd,IAAIO;IACJC,MAAMH,YAAYN,UAAUO,cAAcN,UACvCS,IAAI,CAAC,CAACD;QACLD,SAASC;QACT,OAAOA;IACT,GACCE,KAAK,CAAC,CAACC;QACN,MAAM,IAAIC,MAAM,CAAC,0BAA0B,EAAED,MAAME,OAAO,EAAE;IAC9D;IACF,OAAON,UAAU;AACnB;AAEA;;;;;;;CAOC,GACD,OAAO,eAAeC,MACpBH,UAA2B,EAC3BN,QAAgB,EAChBO,YAAoB,EACpBN,WAAW,GAAG;IAEd,MAAMc,MAAM,MAAMjB,YAAYQ,WAAWU,QAAQ,IAAI;IACrD,OAAO,IAAInB,QAAQE,QAAQC,UAAUC,WAClCgB,kBAAkB,CAAC;QAAEC,KAAK;QAASC,KAAKZ;IAAa,GACrDa,IAAI,CAACL;AACV;AAEA,MAAMM,aAAa;IACjBhB;IACAI;AACF;AAEA,eAAeY,WAAW","file":"index.js","sourcesContent":["import { JWTPayload, SignJWT, importPKCS8 } from 'jose';\n\nconst payload = (\n  issuerId: string,\n  duration: number,\n): JWTPayload => ({\n  audience: 'appstoreconnect-v1',\n  expiresIn: duration,\n  issuer: issuerId,\n});\n\n/**\n * Synchronous token generation.\n * @deprecated Use `token` instead.\n * \n * @param privateKey\n * @param issuerId \n * @param privateKeyId \n * @param duration \n * @returns \n */\nexport function tokenSync(\n  privateKey: string | Buffer,\n  issuerId: string,\n  privateKeyId: string,\n  duration = 500,\n): string {\n  let result: string | undefined;\n  token(privateKey, issuerId, privateKeyId, duration)\n    .then((token) => {\n      result = token;\n      return token;\n    })\n    .catch((error) => {\n      throw new Error(`Failed to generate token: ${error.message}`);\n    });\n  return result ?? '';\n};\n\n/**\n * Asynchronous token generation.\n * @param privateKey \n * @param issuerId \n * @param privateKeyId \n * @param duration \n * @returns \n */\nexport async function token(\n  privateKey: string | Buffer,\n  issuerId: string,\n  privateKeyId: string,\n  duration = 500,\n): Promise<string> {\n  const key = await importPKCS8(privateKey.toString(), 'ES256');\n  return new SignJWT(payload(issuerId, duration))\n    .setProtectedHeader({ alg: 'ES256', kid: privateKeyId })\n    .sign(key);\n};\n\nconst jwtGenCore = {\n  tokenSync,\n  token,\n};\n\nexport default jwtGenCore;\n"]}