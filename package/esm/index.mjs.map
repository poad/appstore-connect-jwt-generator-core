{"version":3,"sources":["../src/esm/index.mts"],"names":["jwt","signOption","issuerId","privateKeyId","duration","algorithm","keyid","audience","expiresIn","issuer","jwtGenCore","tokenSync","privateKey","sign","token","Promise","resolve"],"mappings":"AAAA,OAAOA,SAAS,eAAe;AAE/B,MAAMC,aAAa,CACjBC,UACAC,cACAC,WACqB,CAAA;QACrBC,WAAW;QACXC,OAAOH;QACPI,UAAU;QACVC,WAAWJ;QACXK,QAAQP;IACV,CAAA;AAEA,SAASQ,cAAc;AAEvB,OAAO,SAASC,UACdC,UAA2B,EAC3BV,QAAgB,EAChBC,YAAoB,EACpBC,WAAmB,GAAG;IACZ,OAAOJ,IAAIa,IAAI,CAAC,CAAC,GAAGD,YAAYX,WAAWC,UAAUC,cAAcC;AAAY;AAE3F,OAAO,eAAeU,MACpBF,UAA2B,EAC3BV,QAAgB,EAChBC,YAAoB,EACpBC,WAAmB,GAAG;IAEtB,OAAOW,QAAQC,OAAO,CACpBhB,IAAIa,IAAI,CAAC,CAAC,GAAGD,YAAYX,WAAWC,UAAUC,cAAcC;AAEhE;AAEAM,WAAWC,SAAS,GAAGA;AACvBD,WAAWI,KAAK,GAAGA;AAEnB,eAAeJ,WAAW","file":"index.mjs","sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst signOption = (\n  issuerId: string,\n  privateKeyId: string,\n  duration: number,\n): jwt.SignOptions => ({\n  algorithm: 'ES256',\n  keyid: privateKeyId,\n  audience: 'appstoreconnect-v1',\n  expiresIn: duration,\n  issuer: issuerId,\n});\n\nfunction jwtGenCore() {}\n\nexport function tokenSync(\n  privateKey: string | Buffer,\n  issuerId: string,\n  privateKeyId: string,\n  duration: number = 500,\n): string { return jwt.sign({}, privateKey, signOption(issuerId, privateKeyId, duration)); };\n\nexport async function token(\n  privateKey: string | Buffer,\n  issuerId: string,\n  privateKeyId: string,\n  duration: number = 500,\n): Promise<string> {\n  return Promise.resolve(\n    jwt.sign({}, privateKey, signOption(issuerId, privateKeyId, duration))\n  );\n};\n\njwtGenCore.tokenSync = tokenSync;\njwtGenCore.token = token;\n\nexport default jwtGenCore;\n"]}